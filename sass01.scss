$w: 100px;
$h: 100px;
.container{
    $size:100px;
    .item{
        $color: lightgreen !global;
        width:$size;
        height: $size;
        background: $color;
        &:first-child{
            background:blanchedalmond;
        }
    }
    @at-root .box{
        width: $size;
        height: $size;
        background: $color;
        margin: {
            top: 10px;
            left: 20px;
        }
        padding: {
            bottom:40px;
        }
    }
}

.variableBox{
    width: $w;
    height: $h;
    background: red;
}

// maxin use with @include
@mixin size($w: 100px, $h: 100px){
    width: $w;
    height: $h;
}
  
.box1{
    @include size(100px, 100px);
}

.box2{
    @include size(100px, $h:50px);
}

.box3{
  @include size();
}

@mixin boxBorder($w: 10px, $h: 100px, $color:blue){
    border: $w solid $color;
}

// variable aguments

//need to use ***properties' name!!!!
@mixin boxBorder(
$width: 10px, 
$height: 100px, 
$border: 10px solid red
){
  boxBorder: {
    width:$width;
    height:$height;
    border:$border;
  }
}

.box1{
  $boxBorder-values: (width:10px, height:10px);
  @include boxBorder($boxBorder-values...);
}

//third parameter variable argument
@mixin bg($width, $height, $bg-values...) {
    width: $width;
    height: $height;
    background: $bg-values;
  }
  
  div {
    @include bg(
      100px,
      200px,
      url("/images/a.png") no-repeat 10px 20px,
      url("/images/b.png") no-repeat,
      url("/images/c.png")
    );
  }
  

  //content - A mixin can pass arguments to its 
  //content block the same way it would pass arguments to another mixin by writing
  //if two class name is different 
  //and want to add only one class some properties.

  @mixin icon($url){
    &::after{
      content:$url;
      @content;
    }
  }
  
  .icon1 {
    @include icon("/images/icon.png");
  }
  .icon2 {
    @include icon("/images/icon.png") {
      position: absolute;
    };
  }


// function
//if already has function name, we can use extract-
//example) function red -> function extract-red

@function columns($number, $columns, $width){
  @return $width * ($number / $columns)
}

.container{
  $width:1200px;
  .item:nth-child(1){
    width:columns(1, 12, $width);
  }
}

//Control directives / Expressions
//if conditional (ternary) operator (condition ? true : false)
//if(condition, ture, false){}
//unitless is useful

//example 1
$width:555px;
div{
  width:if($width > 300px, $width, null);
}

@function limitSize($size){
  @if($size >= 0 and $size <= 200px) {
    @return 200px;
  }@else{
    @return 800px;
  }
}

div{
  width:limitSize(180px);
  height:limitSize(340px);
}

//example 2

@mixin pCenter($w, $h, $p: absolute) {
  @if
    $p == absolute
    or $p == fixed
    or not $p == relative
    or not $p == static
  {
    width: if(unitless($w), #{$w}px, $w);
    height: if(unitless($h), #{$h}px, $h);
    position: $p;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
  }
}

.box1 {
  @include pCenter(10px, 20px);
}
.box2 {
  @include pCenter(50, 50, fixed);
}
.box3 {
  @include pCenter(100, 200, relative);
}


